package main

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/gocolly/colly/v2"
	"github.com/jackc/pgx/v5"
)

const (
	dbConnStr      = "postgresql://neondb_owner:npg_8GJQ4Ogkdoib@ep-lingering-sun-a2wkiat7-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require"
	botToken       = "8147802242:AAHOGcmj3SW_Yi2degfpWCV01FdZ1m0DoSw" // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–æ–∫–µ–Ω
	chatID         = 697804659                                        // –£–∫–∞–∂–∏ —Å–≤–æ–π Telegram Chat ID
	priceThreshold = 450000
)

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
func connectDB() (*pgx.Conn, error) {
	conn, err := pgx.Connect(context.Background(), dbConnStr)
	if err != nil {
		return nil, fmt.Errorf("Failed to connect to database: %v", err)
	}
	return conn, nil
}

// –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞
func insertTour(conn *pgx.Conn, bot *tgbotapi.BotAPI, tourURL string, priceInt int, hotelName, location, options string) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç—É—Ä –≤ –±–∞–∑–µ
	var exists bool
	err := conn.QueryRow(context.Background(), "SELECT EXISTS(SELECT 1 FROM tours WHERE url=$1)", tourURL).Scan(&exists)
	if err != nil {
		return fmt.Errorf("Error checking existing tour: %v", err)
	}

	if !exists {
		_, err = conn.Exec(context.Background(), "INSERT INTO tours (url, price, hotel_name, location, options) VALUES ($1, $2, $3, $4, $5)", tourURL, priceInt, hotelName, location, options)
		if err != nil {
			return fmt.Errorf("Error inserting tour into database: %v", err)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞
		if priceInt <= priceThreshold {
			msgText := fmt.Sprintf("üî• –ù–æ–≤—ã–π —Ç—É—Ä –ø–æ –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–µ!\n\nüè® –û—Ç–µ–ª—å: %s\nüìç –õ–æ–∫–∞—Ü–∏—è: %s\nüí∞ –¶–µ–Ω–∞: %d KZT\nüìù –û–ø—Ü–∏–∏: %s\nüîó –°—Å—ã–ª–∫–∞: %s", hotelName, location, priceInt, options, tourURL)
			msg := tgbotapi.NewMessage(chatID, msgText)
			bot.Send(msg)
		}
	}
	return nil
}

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞
func startScraping(c *colly.Collector, conn *pgx.Conn, bot *tgbotapi.BotAPI) {
	c.OnHTML("a.trv-hot-tours-2__item", func(e *colly.HTMLElement) {
		tourURL := e.Attr("href")
		if !strings.HasPrefix(tourURL, "http") {
			tourURL = "https://tourvisor.ru" + tourURL
		}

		// –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
		price := strings.ReplaceAll(e.ChildText(".trv-hot-tours-2__item-price"), "KZT", "")
		price = strings.ReplaceAll(price, " ", "")

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
		priceInt, err := strconv.Atoi(price)
		if err != nil {
			log.Printf("Error converting price: %v", err)
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–∞
		hotelName := e.ChildText(".trv-hot-tours-2__item-name")
		location := e.ChildText(".trv-hot-tours-2__item-location")

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–ø—Ü–∏–π
		options := fmt.Sprintf("–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞: %s, –ë–∞–∑–∞ –ø–∏—Ç–∞–Ω–∏—è: %s, –ö–æ–ª-–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö: %s, –ö–æ–ª-–≤–æ –¥–Ω–µ–π: %s",
			e.ChildText(".trv-hot-tours-2__item-departure"), // –î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞
			e.ChildText(".trv-hot-tours-2__item-food"),      // –ë–∞–∑–∞ –ø–∏—Ç–∞–Ω–∏—è
			e.ChildText(".trv-hot-tours-2__item-adults"),    // –ö–æ–ª-–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö
			e.ChildText(".trv-hot-tours-2__item-days"),      // –ö–æ–ª-–≤–æ –¥–Ω–µ–π
		)

		// –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é insertTour —Ç–µ–ø–µ—Ä—å options, —á—Ç–æ–±—ã —Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ
		err = insertTour(conn, bot, tourURL, priceInt, hotelName, location, options)
		if err != nil {
			log.Printf("Error inserting tour: %v", err)
		}
	})

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	c.Visit("https://tourvisor.ru/goryashchie-tury?departure=60&country=0&sort=0&nights=0")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
func periodicScraping(conn *pgx.Conn, bot *tgbotapi.BotAPI) {
	c := colly.NewCollector()
	for {
		log.Println("–ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")
		startScraping(c, conn, bot)
		log.Println("–û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
		time.Sleep(10 * time.Minute)
	}
}

func main() {
	conn, err := connectDB()
	if err != nil {
		log.Fatal(err)
	}
	defer conn.Close(context.Background())

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatal(err)
	}

	// –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go periodicScraping(conn, bot)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates, err := bot.GetUpdatesChan(u)
	if err != nil {
		log.Fatal(err)
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
	for update := range updates {
		if update.Message == nil {
			continue
		}

		switch update.Message.Text {
		case "/start":
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –Ø —É–≤–µ–¥–æ–º–ª—é —Ç–µ–±—è, –µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è —Ç—É—Ä—ã –¥–µ—à–µ–≤–ª–µ 450 000 KZT!")
			bot.Send(msg)
		case "/tours":
			// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç—É—Ä—ã, –≥–¥–µ —Ü–µ–Ω–∞ <= priceThreshold
			rows, err := conn.Query(context.Background(), "SELECT url, price, hotel_name, location, options FROM tours WHERE price <= $1", priceThreshold)
			if err != nil {
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–æ–≤!"))
				continue
			}
			defer rows.Close()

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç—É—Ä–æ–≤
			if !rows.Next() {
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ—Ç —Ç—É—Ä–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ –≤–∞—à –∑–∞–ø—Ä–æ—Å."))
				continue
			}

			// –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤
			for rows.Next() {
				var url, hotel, location, options string
				var price int
				err := rows.Scan(&url, &price, &hotel, &location, &options)
				if err != nil {
					log.Printf("Error scanning tour row: %v", err)
					continue
				}
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("üè® %s\nüìç %s\nüí∞ %d KZT\nüìù –û–ø—Ü–∏–∏: %s\nüîó %s", hotel, location, price, options, url))
				bot.Send(msg)
			}
		}
	}
}
